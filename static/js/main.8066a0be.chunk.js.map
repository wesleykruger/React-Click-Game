{"version":3,"sources":["images/HarryPotter.jpg","images/Dobby.jpg","images/Dumbledore.jpg","images/FredandGeorge.jpg","images/Ginny.jpg","images/Hermione.jpg","images/Lupin.jpg","images/Ron.jpg","images/Sirius.jpg","images/Snape.jpg","images/Tonks.jpg","images/Voldemort.jpg","components/Nav/Nav.js","components/Grid/index.js","components/characterCard/cardItem.js","components/characterCard/characterContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Nav","Container","_ref","fluid","children","react_default","a","createElement","className","concat","Row","_ref2","Col","_ref3","size","split","map","join","CharacterItem","props","alt","name","src","CharacterContainer","state","banner","score","topScore","charArr","HarryPotterImage","DobbyImage","DumbledoreImage","FredAndGeorgeImage","GinnyImage","HermioneImage","LupinImage","RonImage","SiriusImage","SnapeImage","TonksImage","VoldemortImage","clickedArr","handleCharClick","_this","includes","setState","newScore","fancyNewArray","push","console","log","dir","shuffleArray","this","i","length","j","Math","floor","random","_this2","firstRow","secondRow","thirdRow","character","onClick","key","Component","App","characterContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8066a0be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/HarryPotter.f60505c7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Dobby.da667e19.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Dumbledore.069d0867.jpg\";","module.exports = __webpack_public_path__ + \"static/media/FredandGeorge.87c71936.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Ginny.0fea9b04.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Hermione.69699270.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Lupin.667a600a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Ron.0bfeb75c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Sirius.c1e4dc36.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Snape.8848dfd7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Tonks.bfa0aed3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Voldemort.826de6e4.jpg\";","import React from \"react\";\r\n\r\nfunction Nav() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n      <a className=\"navbar-brand\" href=\"/\">\r\n        React Clicky Game\r\n      </a>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\r\n\r\n// Exporting the Container, Row, and Col components from this file\r\n\r\n// This Container component allows us to use a bootstrap container without worrying about class names\r\nexport function Container({ fluid, children }) {\r\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Row component lets us use a bootstrap row without having to think about class names\r\nexport function Row({ fluid, children }) {\r\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Col component lets us size bootstrap columns with less syntax\r\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\r\nexport function Col({ size, children }) {\r\n  return (\r\n    <div\r\n      className={size\r\n        .split(\" \")\r\n        .map(size => \"col-\" + size)\r\n        .join(\" \")}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport function CharacterItem(props) {\r\n  return (\r\n    <div {...props} >     \r\n       <img alt={props.name} src={props.src} />\r\n       {props.children}\r\n    </div>\r\n  );\r\n}","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"../Grid\";\r\nimport { CharacterItem } from \"./cardItem\"\r\nimport \"./style.css\";\r\n\r\nimport * as HarryPotterImage from \"../../images/HarryPotter.jpg\";\r\nimport * as DobbyImage from \"../../images/Dobby.jpg\";\r\nimport * as DumbledoreImage from \"../../images/Dumbledore.jpg\";\r\nimport * as FredAndGeorgeImage from \"../../images/FredandGeorge.jpg\";\r\nimport * as GinnyImage from \"../../images/Ginny.jpg\";\r\nimport * as HermioneImage from \"../../images/Hermione.jpg\";\r\nimport * as LupinImage from \"../../images/Lupin.jpg\";\r\nimport * as RonImage from \"../../images/Ron.jpg\";\r\nimport * as SiriusImage from \"../../images/Sirius.jpg\";\r\nimport * as SnapeImage from \"../../images/Snape.jpg\";\r\nimport * as TonksImage from \"../../images/Tonks.jpg\";\r\nimport * as VoldemortImage from \"../../images/Voldemort.jpg\";\r\n\r\n\r\n\r\nclass CharacterContainer extends Component {\r\n    state = {\r\n        banner: \"Choose characters!\",\r\n        score: 0,\r\n        topScore: 0,\r\n        charArr: [{\r\n            name: \"Harry\",\r\n            src: HarryPotterImage\r\n        },\r\n        {\r\n            name: \"Dobby\",\r\n            src: DobbyImage\r\n        },\r\n        {\r\n            name: \"Dumbledore\",\r\n            src: DumbledoreImage\r\n        },\r\n        {\r\n            name: \"FredAndGeorge\",\r\n            src: FredAndGeorgeImage\r\n        },\r\n        {\r\n            name: \"Ginny\",\r\n            src: GinnyImage\r\n        },\r\n        {\r\n            name: \"Hermione\",\r\n            src: HermioneImage\r\n        },\r\n        {\r\n            name: \"Lupin\",\r\n            src: LupinImage\r\n        },\r\n        {\r\n            name: \"Ron\",\r\n            src: RonImage\r\n        },\r\n        {\r\n            name: \"Sirius\",\r\n            src: SiriusImage\r\n        },\r\n        {\r\n            name: \"Snape\",\r\n            src: SnapeImage\r\n        },\r\n        {\r\n            name: \"Tonks\",\r\n            src: TonksImage\r\n        },\r\n        {\r\n            name: \"Voldemort\",\r\n            src: VoldemortImage\r\n        }\r\n        ],\r\n        clickedArr: []\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        console.dir(this.state.charArr);\r\n        this.shuffleArray(this.state.charArr)\r\n    }\r\n\r\n    // function to shuffle the order in which the pictures appear on the page\r\n    shuffleArray(a) {\r\n        for (let i = a.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [a[i], a[j]] = [a[j], a[i]];\r\n        }\r\n        return a;\r\n    }\r\n\r\n\r\n    handleCharClick = name => {\r\n        //console.dir(this.state)\r\n        // Picture has been previously clicked, reset game\r\n        if (this.state.clickedArr.includes(name)) {\r\n            this.setState({\r\n                score: 0,\r\n                banner: \"Wrong! Try again!\"\r\n            })\r\n        } else {\r\n            // Picture has not yet been clicked, add point and contine\r\n            let newScore = this.state.score += 1;\r\n            let fancyNewArray = [];\r\n            fancyNewArray.push(name);\r\n            this.setState({\r\n                clickedArr: fancyNewArray,\r\n                score: newScore,\r\n                banner: \"You guessed correctly!\"\r\n            })\r\n            if (this.state.score + 1 > this.state.topScore) {\r\n                this.setState({\r\n                    topScore: this.state.score\r\n                })\r\n            }\r\n        }\r\n\r\n        console.log(\"about to shuffle line 117 : \");\r\n        console.dir(this.state.charArr)\r\n        this.shuffleArray(this.state.charArr);\r\n\r\n    }\r\n\r\n    render() {\r\n        let firstRow = [];\r\n        let secondRow = [];\r\n        let thirdRow = [];\r\n        for (let i = 0; i < this.state.charArr.length; i++) {\r\n            if (i < 4) {\r\n                firstRow.push(this.state.charArr[i]);\r\n            } else if (i < 8) {\r\n                secondRow.push(this.state.charArr[i]);\r\n            } else {\r\n                thirdRow.push(this.state.charArr[i])\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"background\">\r\n                <Container fluid>\r\n                    <Row>\r\n                        <span className=\"navbar\">\r\n                        <Col size=\"4\">\r\n                            <div className=\"navbar-brand\">\r\n                                Harry Potter React Clicky Game\r\n                                </div>\r\n                        </Col>\r\n                        <Col size=\"4\">\r\n                            {this.state.banner}\r\n                        </Col>\r\n                        <Col size=\"4\">\r\n                            Score: {this.state.score} | Top Score: {this.state.topScore}\r\n                        </Col>\r\n                        </span>\r\n                    </Row>\r\n                    <span className=\"playArea\">\r\n                    <Row>\r\n                        <Col size=\"2\"></Col>\r\n                        {firstRow.map(character => {\r\n                            return (\r\n                                <Col size=\"2\">\r\n                                    <CharacterItem onClick={() => this.handleCharClick(character.name)}\r\n                                        key={character.name}\r\n                                        name={character.name}\r\n                                        src={character.src}\r\n                                    />\r\n                                </Col>\r\n                            )\r\n                        })}\r\n                    </Row>\r\n                    <Row>\r\n                        <Col size=\"2\"></Col>\r\n                        {secondRow.map(character => {\r\n                            return (\r\n                                <Col size=\"2\">\r\n                                    <CharacterItem onClick={() => this.handleCharClick(character.name)}\r\n                                        key={character.name}\r\n                                        name={character.name}\r\n                                        src={character.src}\r\n                                    />\r\n                                </Col>\r\n                            )\r\n                        })}\r\n                    </Row>\r\n                    <Row>\r\n                        <Col size=\"2\"></Col>\r\n                        {thirdRow.map(character => {\r\n                            return (\r\n                                <Col size=\"2\">\r\n                                    <CharacterItem onClick={() => this.handleCharClick(character.name)}\r\n                                        key={character.name}\r\n                                        name={character.name}\r\n                                        src={character.src}\r\n                                    />\r\n                                </Col>\r\n                            )\r\n                        })}\r\n                    </Row>\r\n                    </span>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default CharacterContainer;\r\n","import React from 'react';\nimport Nav from './components/Nav/Nav';\nimport CharacterContainer from './components/characterCard/characterContainer';\nimport './App.css';\n\nfunction App() {\n    return (\n      <div className=\"App\">\n        <CharacterContainer />\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}